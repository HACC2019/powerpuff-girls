/* Handle Hasura event trigger
 * This is what the structure of the event payload looks like
 *
 * {
 *   "event": {
 *       "op": "<op-name>",
 *       "data": {
 *         "old": <old-object>,
 *         "new": <new-object>
 *       }
 *   },
 *   "created_at": "<timestamp>",
 *   "id": "<uuid>",
 *   "trigger": {
 *       "name": "<name-of-trigger>",
 *       "id": "<event-uuid>"
 *   },
 *   "table":  {
 *       "schema": "<schema-name>",
 *       "name": "<table-name>"
 *   }
 * }
 *
 */

const { request } = require('graphql-request')


exports.handler = (lambdaEvent, context, cb) => {
  //the JSON received from the db
  const hasuraTriggerPayload = JSON.parse(lambdaEvent.body);

  console.log(hasuraTriggerPayload);
  const hasuraData = hasuraTriggerPayload.event.data.new;

  const jsonID = hasuraData.id;
  

const query = `{
    mutation inValidate {
    update_chargedata(where: {id: {_eq: jsonID}}, _set: {validity: false}) {
    affected_rows
    returning {
      id
    }
  }
}


}`

  //pattern for invalid data
  var pattern = new RegExp('(00:00:00|0.00)', 'i');

  if (pattern.test(hasuraData)) {
    //mutate the db to make row's  'validity' column set to FALSE

    request("https://charge-data.herokuapp.com/v1/graphql", query).then(data =>
      console.log(data)
    );
  }

  // 
  cb(null, {
    statusCode: 200,
    body: JSON.stringify({ receivedData: hasuraData })
  });

};
